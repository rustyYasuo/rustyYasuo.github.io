<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一篇划水(CSAPP bomb lab)</title>
      <link href="/2021/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%88%92%E6%B0%B4%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/07/20/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%88%92%E6%B0%B4%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本人的第一篇划水博客,放点课堂上的东西得了…</p><h2 id="CSAPP-bomb-lab"><a href="#CSAPP-bomb-lab" class="headerlink" title="CSAPP bomb lab"></a>CSAPP bomb lab</h2><p>[TOC]</p><h2 id="1-phase-1"><a href="#1-phase-1" class="headerlink" title="1. phase_1"></a>1. phase_1</h2><ul><li><p>首先使用gdb中使用<code>disassemble phase_1</code>查看汇编代码</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210518192025792.png" alt="image-20210518192025792"></p><p>阅读可知如果执行je跳转至leave就不会触发炸弹，往上查看跳转条件，test判断eax是否为0，为0的前提是两串字符串（用户输入的字符串与原本存在的字符串）相等，原本的字符串会保存在data段，再往上看，判断字符串可能存放在0x804a140地址处，使用<code> x/s 0x804a140</code>命令，获得解题flag： <code>I turned the moon into something I call a Death Star.</code></p></li><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155124923.png" alt="image-20210529155124923"></p></li></ul><h2 id="2-phase-2"><a href="#2-phase-2" class="headerlink" title="2. phase_2"></a>2. phase_2</h2><ul><li><p>首先查看phase_2汇编代码</p><p>![img](file:///C:\Users\12499\Documents\Tencent Files\1249911865\Image\C2C\B4IYDYVUSN_]2QZ[S$<a href="mailto:&#66;&#84;&#x40;&#80;&#x30;&#46;&#112;&#110;&#x67;">&#66;&#84;&#x40;&#80;&#x30;&#46;&#112;&#110;&#x67;</a>)</p><p>首先看到read_six_numbers的函数，猜测输入应该是和6个数字有关，数字被保存在%esp-0x20处，在0x08048b19处设置断点，随便输入6个数，运行程序至断点，使用<code>p *(int *) ($ebp -0x20 )</code> 查看发现是输入的第一个数</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210520191850738.png" alt="image-20210520191850738"></p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210520191910337.png" alt="image-20210520191910337"></p><p>将0x20依次减4发现是对应存储的第2、3…6个数。往下阅读汇编代码，发现是判断第一个数和0是否相等，不相等则直接跳转至bomb（GG），所以这里判断输入的第一个数应该是0，再往下看，拿第二个数与1比较，不相同也是直接炸掉，相同则跳转至下面的0x8048b4a处继续执行（这里使用断点进行测试，在&lt;+30&gt;和&lt;+70&gt;处设置断点，运行程序，输入0 1 XXXX，可以发现未触发&lt;+30&gt;处断点，而触发了&lt;+70&gt;处断点，证明前两个数输入正确。再往下阅读代码，发现是一个循环结构，共循环四次，最终需要触发&lt;+68&gt;处的jump来拆弹，阅读循环部分内容，通过 <code>mov -0x8(%ebx),%eax  ; add -0x4(%ebx),%eax</code>发现是将两个相邻地址的内容相加的值再与寄存器内的值做比较（就类似A[2]=A[1]+A[0]）由此判断第之后的数为 1 2 3 5，使用gdb进行测试，结果正确，解题flag：<code>0 1 1 2 3 5</code></p></li><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155105519.png" alt="image-20210529155105519"></p></li></ul><h2 id="3-phase-3"><a href="#3-phase-3" class="headerlink" title="3. phase_3"></a>3. phase_3</h2><ul><li><p>首先查看phase_3的汇编代码</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210520194618529.png" alt="image-20210520194618529"></p><p>可以看到，phase_3在&lt;+34&gt;处第一次调用了判断输入的函数，然后进行比较，成功则跳转到49处，失败就bomb，所以我们需要通过参数确定输入内容，查看data段0x804a3a9处的内容：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210520195652847.png" alt="image-20210520195652847"></p><p>可以看到输入的内容应该是两个十进制数字，继续阅读汇编代码，在&lt;+49&gt;<code>cmpl   $0x7,-0xc(%ebp)</code>处下断点，运行程序，随便输入两个数，查看$ebp-0xc的内容得知使我们输入的两个数字的第一个，需要比7小不然就会触发bomb，继续往下阅读汇编代码，发现是一个switch的选择结构，查看 *0x804a1a8处的内容发现对应的是一个跳转地址，统计如下：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210523130206211.png" alt="image-20210523130206211"></p><p>（简单说明：第一个数输入0则跳转到第一个0x08048b9a地址处继续运行，输入1则跳转到第二个，以此类推…），假设我们输入的第一个数是0，从0x08048b9a处继续阅读汇编代码，发现就是将第二个数与0x140比较，若相等就成功拆弹，由此确定第二个数是320即可（第一个数是1、2、3…7应该也有对应的解，这里没有深究）,重新运行程序，输入<code>0 320</code>，发现成功通过phase_3.</p></li><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155102441.png" alt="image-20210529155102441"></p></li></ul><h2 id="4-phase-4"><a href="#4-phase-4" class="headerlink" title="4. phase_4"></a>4. phase_4</h2><ul><li><p>首先查看phase_4的汇编代码</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210523195355812.png" alt="image-20210523195355812"></p></li></ul><p>查看0x804a3a9处内容，发现输入格式是输入两个十进制数。由&lt;+48&gt;处jne可知输入的第二个数需要小于14，否则就会bomb掉，然后会将输入的两个参数传进func4函数里。往下继续阅读汇编代码，通过两个cmp指令可以明确：①函数返回值为1②第二个输入数字是1 同时满足以上条件才能完成拆弹工作。返回查看func4汇编代码，发现有调用自己的步骤，是一个递归函数。函数有3个参数：用户输入的前两个数a、b，初值为14的参数c。</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210523205916411.png" alt="image-20210523205916411"></p><p>将其转化成C语言形式（这一步太麻烦了），大概可以表示为：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">func4</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>c <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> b<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">==</span> a<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">func4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">func4</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> tmp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>这个时候写一个C语言程序，第一个输入遍历0到13，输出满足条件的数即可</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210523230213903.png" alt="image-20210523230213903"></p><p>最后可以得到：（8，1） （9，1） （11，1）是可行解</p><ul><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155049262.png" alt="image-20210529155049262"></p></li></ul><h2 id="5-phase-5"><a href="#5-phase-5" class="headerlink" title="5. phase_5"></a>5. phase_5</h2><ul><li><p>首先查看phase_5汇编代码</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210523231025778.png" alt="image-20210523231025778"></p><p>根据&lt;+13&gt;和&lt;+18&gt;判断我们输入的内容应该是长度为6的字符串，接着往下查看汇编代码，在&lt;+28&gt;处初始化了一个循环变量i，然后赋初值为0，跳转到&lt;+33&gt;处进行循环，循环内容大概是根据输入的6个字符，然后每一个字符的低四位作为索引/数组下标，来确定第二个移位操作的字符，这里的数组是0x804a1c8开头一个字符串（之前被视频内容误导了思路，一直使用X/20g命令，看到一串很奇怪的数也不像地址，后来突然觉得像第一题里的字符串，使用x/s命令查看到字符串一下就明了了）：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210524234145511.png" alt="image-20210524234145511"></p><p>之后0x804a19e地址存放也是长度为6的字符串，那么本题就是通过输入的6个字符串的低四位来从0x804a1c8数组里取出对应的字符，然后与“oilers”相比较，相同就能成功通关。例如第一个字符o，在第一个数组里的下标是10，即1010，所以我们输入的第一个字符的ASCII码后四位也是1010，查表可以确定输入是Z或z(不唯一)。由此可以确定一个解题flag：<code>ztouvw</code></p></li><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155046603.png" alt="image-20210529155046603"></p></li></ul><h2 id="6-phase-6"><a href="#6-phase-6" class="headerlink" title="6. phase_6"></a>6. phase_6</h2><ul><li><p>首先查看phase_6汇编代码：</p></li><li><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529112453765.png" alt="image-20210529112453765"></p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529112529078.png" alt="image-20210529112529078"></p><p>一开始就是正常开辟栈空间和压栈之类的操作，注意到&lt;+21&gt;对red_six_numbers函数的调用，可知和phase_2一样，输入应该是6个数，继续阅读汇编代码，发现应该是多重循环：</p><p>第一重循环应该是依次读取6个输入的数，用数组存储，根据&lt;+35&gt; 处的：</p><pre><code>sub    $0x1,%eaxcmp    $0x5,%eaxjbe    0x8048d4f &lt;phase_6+48&gt;</code></pre><p>可知输入的数需要处于[1,6]这个区间，否则就会炸掉；</p><p>第二重循环：后面的5个数字，不能与前面的数相同。</p><p>之后的循环就只能看个大概了（跳来跳去真不好看…)，讲一下解题的过程：</p><p>注意到&lt;+135&gt;处的指令：<code>mov    $0x804c154,%edx</code>，使用x命令查看地址里的内容之后发现gdb提示是一个链表，整理出来的链表信息如下图所示：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529115859135.png" alt="image-20210529115859135"></p><p>这几个循环的操作大概就是根据输入的下标，将这些链表结点的里存储的内容重排，比如你输入的是6 5 4 3 2 1，那么编号为6的结点的值就会放到第一个里去，即1d3放到node1中，以此类推，最后通过&lt;+188&gt; 处的jge指令可以知道，需要让这个链表里的数据按照降序排列，就能够完成拆弹工作。</p><p>根据之前的分析，我们需要将链表中的内容按降序排序后，链表的序号组成的一串数就是本题的flag：<code>1 3 6 2 5</code></p></li><li><p>完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155035030.png" alt="image-20210529155035030"></p></li></ul><h2 id="7-最终结果"><a href="#7-最终结果" class="headerlink" title="7. 最终结果"></a>7. 最终结果</h2><ul><li><p>bomblab 完成截图</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155016815.png" alt="image-20210529155016815"></p></li><li><p>（可选）bomblab 隐藏关卡</p></li></ul><p>打开汇编程序，发现secret_phase只有在函数phase_defused中被调用</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529141903706.png" alt="image-20210529141903706"></p><p>查看代码，发现只有完成之前6道拆弹题才能通过输入指定密码进入到隐藏关卡中，这里针对几个给出的地址，查看其中的内容：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529142156911.png" alt="image-20210529142156911"></p><p>这样就算看不懂汇编代码也能知道这可以进入隐藏关卡；注意到这里的输入要求”%d %d %s”（已经没有可以输入的地方了，回想之前的6道拆弹题，发现第三题和第四题的输入是两个十进制数，可以尝试一下在这两个后面加上那个最后的%s），显然，最后的字符串内容就是0x0804a40c处的”DrEvil”。</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529143143374.png" alt="image-20210529143143374"></p><p>经过尝试，在第四题的输入后加上字符串”DrEvil”可以进入到隐藏关卡。</p><p>隐藏关卡汇编代码如下：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529143649939.png" alt="image-20210529143649939"></p><p>前面就是一些基本处理，将0xa赋给%esp+8…，在&lt;+31&gt;处看到了一个读取输入的函数，读取一个输入的十进制数。这个数（假定为b）需要满足b-1&lt;0x3e8（可以爆破了），否则就会炸掉，之后就是调用函数fun7（查看汇编代码之后发现又是一个递归函数），要求这个函数的返回值是1，就能成功解决这道secret_phase。下面来讨论这个递归函数fun7：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529143715564.png" alt="image-20210529143715564"></p><p>这里按照习惯先查看ebp中的值，可以看到：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529152645725.png" alt="image-20210529152645725"></p><p>$ebp+8中不知道放了个啥玩意，$ebp+0xc处存放的是我们的输入，之后的edx中存放的是36，在递归中下断点，继续运行，再次查看相关内容，可以发现：函数没有对我们输入的值进行操作，只是简单的拿来比较，但是edx中的值发生变化了，变成了50</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529152945475.png" alt="image-20210529152945475"></p><p>由此我们仔细分析这个递归函数，发现一次递归中功能如下：假设edx中存储的值为*a，输入的值为b，%eax做如下变化：</p><p>①如果edx中为空或edx中为0，返回-1（eax的值为-1，以下对返回值得操作都是修改eax）；</p><p>②如果*a&gt;b，将edx偏移0x4再次作为第一个参数x，输入的y作为第二个参数。返回值是做了乘以2的操作；</p><p>③*a==b，返回0；</p><p>④*a&lt;b，传入的第一个参数变成了edx偏移0x8.第二个参数与为y，返回值为2eax+1</p><p>既然最后返回值要求是1，那么回推：1=2乘0+1（情况4），0=0（情况3），最深层的递归需要相等，然后第一层递归需要比a中的参数大，这样我们可以求得解为：<code>50</code>（45也行，多了一步2乘0）。</p><h2 id="8-备注"><a href="#8-备注" class="headerlink" title="8. 备注"></a>8. 备注</h2><p>解题答案记录：</p><p><img src="C:\Users\12499\AppData\Roaming\Typora\typora-user-images\image-20210529155356434.png" alt="image-20210529155356434"></p><p>常规解 法，不常规的可以去了解一下CTF~（我太菜了还不会）</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
